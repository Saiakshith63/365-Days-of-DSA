1.Print GFG n times
-------------------

class Solution:
    def printGfg(self, n,current=1):
        #checking for base case
        if current>n:
            return
        #print GFG
        
        print("GFG",end=' ')
        
        #recursive call
        self.printGfg(n,current+1)


2.Print 1 To N Without Loop
----------------------------------

class Solution:    
    #Complete this function
    def printNos(self,n,i=1):
        #base case
        if i>n:
            return 
        
        #print numbers 
        print(i,end=' ')
        
        #recursive call
        
        self.printNos(n,i+1)


3.Print N to 1 without loop
--------------------------------------

class Solution:
    def printNos(self, n, i=1):
        
        #base case
        if i > n:
            return
        
        #print n 
        print(n,end=' ')
        
        #calling recurisvely
        self.printNos(n-1,i)


4.Sum of first n terms
---------------------------------------

class Solution:
    def sumOfSeries(self,n):
        #code here
        
        if n==0:
            return 0  #base case 
            
        return  n ** 3 + self.sumOfSeries(n-1) # recursivecase


5.Factorials Less than or Equal to n
-----------------------------------------------
class Solution:
    def factorialNumbers(self, n):
    	#code here 
    	res=[]
    	fact=1
    	i=1
    	
    	while fact<=n:
    	    res.append(fact)
    	    i += 1
    	    fact *= i
    	return res  



6.Reverse an Array
--------------------------------------
class Solution:
    def reverseArray(self, arr,i=0):
        # code here
        n=len(arr)
        if i >= n//2:
            return
        arr[i],arr[n-i-1]=arr[n-i-1],arr[i]
        self.reverseArray(arr,i+1)



7.Fibonacci Series
-----------------------

class Solution(object):
    def fib(self, n):
        if n<=1:
            return n
        return self.fib(n-1)+self.fib(n-2)
